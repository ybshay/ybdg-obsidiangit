/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => FleetingNotesPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  fleeting_notes_folder: "/",
  sync_on_startup: false,
  username: "",
  password: ""
};
var FleetingNotesPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addCommand({
        id: "sync-fleeting-notes",
        name: "Pull All Notes from Fleeting Notes",
        callback: () => __async(this, null, function* () {
          this.syncFleetingNotes();
        })
      });
      this.addSettingTab(new FleetingNotesSettingTab(this.app, this));
      if (this.settings.sync_on_startup) {
        this.syncFleetingNotes();
      }
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  syncFleetingNotes() {
    return __async(this, null, function* () {
      try {
        let notes = yield getAllNotesFirebase(this.settings.username, this.settings.password);
        notes = notes.filter((note) => !note._isDeleted);
        yield this.writeNotes(notes, this.settings.fleeting_notes_folder);
        new import_obsidian.Notice("Fleeting Notes sync success!");
      } catch (e) {
        if (typeof e === "string") {
          new import_obsidian.Notice(e);
        } else {
          new import_obsidian.Notice("Fleeing Notes sync failed - please check settings");
          console.error(e);
        }
      }
    });
  }
  getExistingFleetingNotes(dir) {
    return __async(this, null, function* () {
      let noteMap = new Map();
      try {
        var files = this.app.vault.getFiles();
        for (var i = 0; i < files.length; i++) {
          var file = files[i];
          var file_id;
          var metadata = yield this.app.metadataCache.getFileCache(file);
          if (metadata && metadata.frontmatter) {
            file_id = metadata.frontmatter.id || null;
          } else {
            file_id = null;
          }
          var fileInDir = dir === "/" ? !file.path.contains("/") : file.path.startsWith(dir);
          if (!fileInDir || file_id == null) {
            continue;
          }
          noteMap.set(file_id, file);
        }
      } catch (e) {
        console.error("Failed to Retrieve All Existing Fleeting Notes");
        console.error(e);
      }
      return noteMap;
    });
  }
  convertObsidianPath(path) {
    path = path[0] === "/" ? path.replace("/", "") : path;
    path = path || "/";
    return path;
  }
  writeNotes(notes, folder) {
    return __async(this, null, function* () {
      folder = this.convertObsidianPath(folder);
      try {
        var existingNotes = yield this.getExistingFleetingNotes(folder);
        var folderObj = this.app.vault.getAbstractFileByPath(folder);
        if (folderObj == null) {
          yield this.app.vault.createFolder(folder);
        }
        for (var i = 0; i < notes.length; i++) {
          var note = notes[i];
          var newTs = note.timestamp.replace(":", "h").replace(":", "m") + "s";
          var title = note.title ? `${note.title}.md` : `${newTs}.md`;
          var frontmatter = `---
id: ${note._id}
title: ${title.replace(".md", "")}
date: ${note.timestamp.substring(0, 10)}
---
`;
          var path = this.convertObsidianPath(pathJoin([folder, title]));
          var mdContent = frontmatter + note.content + "\n\n---\n\n" + note.source;
          var file = existingNotes.get(note._id) || null;
          if (file != null) {
            yield this.app.vault.modify(file, mdContent);
          } else {
            var delFile = this.app.vault.getAbstractFileByPath(path);
            if (delFile != null) {
              yield this.app.vault.delete(delFile);
            }
            yield this.app.vault.create(path, mdContent);
          }
        }
      } catch (e) {
        console.log(e);
        throw "Failed to write notes to Obsidian - Check `folder location` is not empty in settings";
      }
    });
  }
};
var FleetingNotesSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Fleeting Notes Sync Settings" });
    new import_obsidian.Setting(containerEl).setName("Fleeting Notes folder location").setDesc("Files will be populated here from Fleeting Notes").addText((text) => text.setPlaceholder("Enter the folder location").setValue(this.plugin.settings.fleeting_notes_folder).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.fleeting_notes_folder = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Username / Email").addText((text) => text.setPlaceholder("Enter username/email").setValue(this.plugin.settings.username).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.username = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Password").addText((text) => text.setPlaceholder("Enter password").setValue(this.plugin.settings.password).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.password = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Sync notes on startup").addToggle((tog) => tog.setValue(this.plugin.settings.sync_on_startup).onChange((val) => __async(this, null, function* () {
      this.plugin.settings.sync_on_startup = val;
      yield this.plugin.saveSettings();
    })));
  }
};
function pathJoin(parts, sep = "/") {
  var separator = sep || "/";
  var replace = new RegExp(separator + "{1,}", "g");
  return parts.join(separator).replace(replace, separator);
}
var getAllNotesFirebase = (email, password) => __async(void 0, null, function* () {
  let notes = [];
  try {
    const body = {
      "email": email,
      "password": password
    };
    const config = {
      method: "post",
      url: "https://us-central1-fleetingnotes-22f77.cloudfunctions.net/get_all_notes",
      contentType: "application/json",
      body: JSON.stringify(body)
    };
    const res = yield (0, import_obsidian.request)(config);
    notes = JSON.parse(res);
  } catch (e) {
    console.log(e);
    throw "Failed to retrieve notes from the database - Check credentials in settings & internet connection";
  }
  return notes;
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgcmVxdWVzdCwgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG4vLyBSZW1lbWJlciB0byByZW5hbWUgdGhlc2UgY2xhc3NlcyBhbmQgaW50ZXJmYWNlcyFcclxuXHJcbmludGVyZmFjZSBGbGVldGluZ05vdGVzU2V0dGluZ3Mge1xyXG5cdGZsZWV0aW5nX25vdGVzX2ZvbGRlcjogc3RyaW5nO1xyXG5cdHN5bmNfb25fc3RhcnR1cDogYm9vbGVhbjtcclxuXHR1c2VybmFtZTogc3RyaW5nO1xyXG5cdHBhc3N3b3JkOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IEZsZWV0aW5nTm90ZXNTZXR0aW5ncyA9IHtcclxuXHRmbGVldGluZ19ub3Rlc19mb2xkZXI6ICcvJyxcclxuXHRzeW5jX29uX3N0YXJ0dXA6IGZhbHNlLFxyXG5cdHVzZXJuYW1lOiAnJyxcclxuXHRwYXNzd29yZDogJycsXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZsZWV0aW5nTm90ZXNQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdHNldHRpbmdzOiBGbGVldGluZ05vdGVzU2V0dGluZ3M7XHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblx0XHQvLyBUaGlzIGZvcmNlcyBmbGVldGluZyBub3RlcyB0byBzeW5jIHdpdGggb2JzaWRpYW5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnc3luYy1mbGVldGluZy1ub3RlcycsXHJcblx0XHRcdG5hbWU6ICdQdWxsIEFsbCBOb3RlcyBmcm9tIEZsZWV0aW5nIE5vdGVzJyxcclxuXHRcdFx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHR0aGlzLnN5bmNGbGVldGluZ05vdGVzKCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IEZsZWV0aW5nTm90ZXNTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblxyXG5cdFx0Ly8gc3luY3Mgb24gc3RhcnR1cFxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3Muc3luY19vbl9zdGFydHVwKSB7XHJcblx0XHRcdHRoaXMuc3luY0ZsZWV0aW5nTm90ZXMoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdG9udW5sb2FkKCkge1xyXG5cclxuXHR9XHJcblxyXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHN5bmNGbGVldGluZ05vdGVzICgpIHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGxldCBub3RlcyA9IGF3YWl0IGdldEFsbE5vdGVzRmlyZWJhc2UodGhpcy5zZXR0aW5ncy51c2VybmFtZSwgdGhpcy5zZXR0aW5ncy5wYXNzd29yZCk7XHJcblx0XHRcdG5vdGVzID0gbm90ZXMuZmlsdGVyKChub3RlOiBOb3RlKSA9PiAhbm90ZS5faXNEZWxldGVkKTtcclxuXHRcdFx0YXdhaXQgdGhpcy53cml0ZU5vdGVzKG5vdGVzLCB0aGlzLnNldHRpbmdzLmZsZWV0aW5nX25vdGVzX2ZvbGRlcik7XHJcblx0XHRcdG5ldyBOb3RpY2UoJ0ZsZWV0aW5nIE5vdGVzIHN5bmMgc3VjY2VzcyEnKTtcclxuXHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0aWYgKHR5cGVvZiBlID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRcdG5ldyBOb3RpY2UoZSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bmV3IE5vdGljZSgnRmxlZWluZyBOb3RlcyBzeW5jIGZhaWxlZCAtIHBsZWFzZSBjaGVjayBzZXR0aW5ncycpO1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIGdldEV4aXN0aW5nRmxlZXRpbmdOb3RlcyAoZGlyOiBzdHJpbmcpIHtcclxuXHRcdGxldCBub3RlTWFwOiBNYXA8c3RyaW5nLCBURmlsZT4gPSBuZXcgTWFwPHN0cmluZywgVEZpbGU+KCk7XHJcblx0XHR0cnkge1xyXG5cdFx0XHR2YXIgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRGaWxlcygpO1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIGZpbGUgPSBmaWxlc1tpXTtcclxuXHRcdFx0XHR2YXIgZmlsZV9pZDogc3RyaW5nO1xyXG5cdFx0XHRcdHZhciBtZXRhZGF0YSA9IGF3YWl0IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xyXG5cdFx0XHRcdGlmIChtZXRhZGF0YSAmJiBtZXRhZGF0YS5mcm9udG1hdHRlcil7XHJcblx0XHRcdFx0XHRmaWxlX2lkID0gbWV0YWRhdGEuZnJvbnRtYXR0ZXIuaWQgfHwgbnVsbDtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZmlsZV9pZCA9IG51bGxcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dmFyIGZpbGVJbkRpciA9IChkaXIgPT09ICcvJykgPyAhZmlsZS5wYXRoLmNvbnRhaW5zKCcvJykgOiBmaWxlLnBhdGguc3RhcnRzV2l0aChkaXIpO1xyXG5cdFx0XHRcdGlmICghZmlsZUluRGlyIHx8IGZpbGVfaWQgPT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0Y29udGludWVcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bm90ZU1hcC5zZXQoZmlsZV9pZCwgZmlsZSk7XHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcignRmFpbGVkIHRvIFJldHJpZXZlIEFsbCBFeGlzdGluZyBGbGVldGluZyBOb3RlcycpO1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKGUpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5vdGVNYXA7XHJcblx0fVxyXG5cclxuXHQvLyBwYXRocyBpbiBvYnNpZGlhbiBhcmUgd2VpcmQsIG5lZWQgZnVuY3Rpb24gdG8gY29udmVydCB0byBwcm9wZXIgcGF0aFxyXG5cdGNvbnZlcnRPYnNpZGlhblBhdGgocGF0aDogc3RyaW5nKSB7XHJcblx0XHRwYXRoID0gKHBhdGhbMF0gPT09ICcvJykgPyBwYXRoLnJlcGxhY2UoJy8nLCAnJykgOiBwYXRoO1xyXG5cdFx0cGF0aCA9IHBhdGggfHwgJy8nO1xyXG5cdFx0cmV0dXJuIHBhdGg7XHJcblx0fVxyXG5cclxuXHQvLyBUT0RPOiBhZGQgdGVtcGxhdGluZyBpbiB0aGUgZnV0dXJlXHJcblx0YXN5bmMgd3JpdGVOb3RlcyAobm90ZXM6IEFycmF5PE5vdGU+LCBmb2xkZXI6IHN0cmluZykge1xyXG5cdFx0Zm9sZGVyID0gdGhpcy5jb252ZXJ0T2JzaWRpYW5QYXRoKGZvbGRlcik7XHJcblx0XHR0cnkge1xyXG5cdFx0XHR2YXIgZXhpc3RpbmdOb3RlcyA9IGF3YWl0IHRoaXMuZ2V0RXhpc3RpbmdGbGVldGluZ05vdGVzKGZvbGRlcik7XHJcblx0XHRcdHZhciBmb2xkZXJPYmogPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZm9sZGVyKTtcclxuXHRcdFx0aWYgKGZvbGRlck9iaiA9PSBudWxsKSB7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlRm9sZGVyKGZvbGRlcik7XHJcblx0XHRcdH1cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBub3Rlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciBub3RlID0gbm90ZXNbaV07XHJcblx0XHRcdFx0dmFyIG5ld1RzID0gbm90ZS50aW1lc3RhbXAucmVwbGFjZSgnOicsICdoJykucmVwbGFjZSgnOicsICdtJykgKyAncyc7XHJcblx0XHRcdFx0dmFyIHRpdGxlID0gKG5vdGUudGl0bGUpID8gYCR7bm90ZS50aXRsZX0ubWRgIDogYCR7bmV3VHN9Lm1kYDtcclxuXHRcdFx0XHR2YXIgZnJvbnRtYXR0ZXIgPSBcclxuYC0tLVxyXG5pZDogJHtub3RlLl9pZH1cclxudGl0bGU6ICR7dGl0bGUucmVwbGFjZSgnLm1kJywgJycpfVxyXG5kYXRlOiAke25vdGUudGltZXN0YW1wLnN1YnN0cmluZygwLCAxMCl9XHJcbi0tLVxcbmBcclxuXHRcdFx0XHR2YXIgcGF0aCA9IHRoaXMuY29udmVydE9ic2lkaWFuUGF0aChwYXRoSm9pbihbZm9sZGVyLCB0aXRsZV0pKTtcclxuXHRcdFx0XHR2YXIgbWRDb250ZW50ID0gZnJvbnRtYXR0ZXIgKyBub3RlLmNvbnRlbnQgKyBcIlxcblxcbi0tLVxcblxcblwiICsgbm90ZS5zb3VyY2U7XHJcblx0XHRcdFx0dmFyIGZpbGUgPSBleGlzdGluZ05vdGVzLmdldChub3RlLl9pZCkgfHwgbnVsbDtcclxuXHRcdFx0XHRpZiAoZmlsZSAhPSBudWxsKSB7XHJcblx0XHRcdFx0XHQvLyBtb2RpZnkgZmlsZSBpZiBpZCBleGlzdHMgaW4gZnJvbnRtYXR0ZXJcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShmaWxlLCBtZENvbnRlbnQpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyByZWNyZWF0ZSBmaWxlIG90aGVyd2lzZVxyXG5cdFx0XHRcdFx0dmFyIGRlbEZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocGF0aCk7XHJcblx0XHRcdFx0XHRpZiAoZGVsRmlsZSAhPSBudWxsKSB7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLnZhdWx0LmRlbGV0ZShkZWxGaWxlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShwYXRoLCBtZENvbnRlbnQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0fVxyXG5cdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhlKTtcclxuXHRcdFx0dGhyb3cgJ0ZhaWxlZCB0byB3cml0ZSBub3RlcyB0byBPYnNpZGlhbiAtIENoZWNrIGBmb2xkZXIgbG9jYXRpb25gIGlzIG5vdCBlbXB0eSBpbiBzZXR0aW5ncyc7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5jbGFzcyBGbGVldGluZ05vdGVzU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG5cdHBsdWdpbjogRmxlZXRpbmdOb3Rlc1BsdWdpbjtcclxuXHJcblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogRmxlZXRpbmdOb3Rlc1BsdWdpbikge1xyXG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xyXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcblx0fVxyXG5cclxuXHRkaXNwbGF5KCk6IHZvaWQge1xyXG5cdFx0Y29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7dGV4dDogJ0ZsZWV0aW5nIE5vdGVzIFN5bmMgU2V0dGluZ3MnfSk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKCdGbGVldGluZyBOb3RlcyBmb2xkZXIgbG9jYXRpb24nKVxyXG5cdFx0XHQuc2V0RGVzYygnRmlsZXMgd2lsbCBiZSBwb3B1bGF0ZWQgaGVyZSBmcm9tIEZsZWV0aW5nIE5vdGVzJylcclxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdFbnRlciB0aGUgZm9sZGVyIGxvY2F0aW9uJylcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZmxlZXRpbmdfbm90ZXNfZm9sZGVyKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmZsZWV0aW5nX25vdGVzX2ZvbGRlciA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0fSkpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnVXNlcm5hbWUgLyBFbWFpbCcpXHJcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignRW50ZXIgdXNlcm5hbWUvZW1haWwnKVxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VybmFtZSlcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VybmFtZSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0fSkpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnUGFzc3dvcmQnKVxyXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHBhc3N3b3JkJylcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucGFzc3dvcmQpXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucGFzc3dvcmQgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pKTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1N5bmMgbm90ZXMgb24gc3RhcnR1cCcpXHJcblx0XHRcdC5hZGRUb2dnbGUodG9nID0+IHRvZ1xyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zeW5jX29uX3N0YXJ0dXApXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWwpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnN5bmNfb25fc3RhcnR1cCA9IHZhbDtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pKTtcclxuXHR9XHJcbn1cclxuXHJcbi8vIGhlbHBlciBmdW5jdGlvbnNcclxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI5ODU1MjgyLzEzNjU5ODMzXHJcbmZ1bmN0aW9uIHBhdGhKb2luKHBhcnRzOiBBcnJheTxzdHJpbmc+LCBzZXA6IHN0cmluZyA9ICcvJyl7XHJcbiAgdmFyIHNlcGFyYXRvciA9IHNlcCB8fCAnLyc7XHJcbiAgdmFyIHJlcGxhY2UgICA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yKyd7MSx9JywgJ2cnKTtcclxuICByZXR1cm4gcGFydHMuam9pbihzZXBhcmF0b3IpLnJlcGxhY2UocmVwbGFjZSwgc2VwYXJhdG9yKTtcclxufVxyXG5cclxuLy8gdGFrZXMgaW4gQVBJIGtleSAmIHF1ZXJ5XHJcbmNvbnN0IGdldEFsbE5vdGVzUmVhbG0gPSBhc3luYyAoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4ge1xyXG4gIGxldCBub3RlcyA9IFtdO1xyXG4gIHRyeSB7XHJcblx0Y29uc3QgcXVlcnkgPSBge1wicXVlcnlcIjpcInF1ZXJ5IHsgIG5vdGVzIHsgICAgX2lkICAgIHRpdGxlICAgIGNvbnRlbnQgICAgc291cmNlICAgIHRpbWVzdGFtcCAgIF9pc0RlbGV0ZWR9fVwifSdgXHJcblx0Y29uc3QgY29uZmlnID0ge1xyXG5cdFx0bWV0aG9kOiAncG9zdCcsXHJcblx0XHR1cmw6ICdodHRwczovL3JlYWxtLm1vbmdvZGIuY29tL2FwaS9jbGllbnQvdjIuMC9hcHAvZmxlZXRpbmctbm90ZXMta25vanMvZ3JhcGhxbCcsXHJcblx0XHRoZWFkZXJzOiB7IFxyXG5cdFx0J2VtYWlsJzogZW1haWwsXHJcblx0XHQncGFzc3dvcmQnOiBwYXNzd29yZCxcclxuXHRcdH0sXHJcblx0XHRib2R5OiBxdWVyeSxcclxuXHR9O1xyXG5cdGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoY29uZmlnKTtcclxuXHRub3RlcyA9IEpTT04ucGFyc2UocmVzKVtcImRhdGFcIl1bXCJub3Rlc1wiXVxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuXHQgIGNvbnNvbGUubG9nKGUpO1xyXG5cdCAgdGhyb3cgJ0ZhaWxlZCB0byByZXRyaWV2ZSBub3RlcyBmcm9tIHRoZSBkYXRhYmFzZSAtIENoZWNrIGNyZWRlbnRpYWxzIGluIHNldHRpbmdzICYgaW50ZXJuZXQgY29ubmVjdGlvbic7XHJcbiAgfVxyXG4gIHJldHVybiBub3RlcztcclxufVxyXG5cclxuLy8gdGFrZXMgaW4gQVBJIGtleSAmIHF1ZXJ5XHJcbmNvbnN0IGdldEFsbE5vdGVzRmlyZWJhc2UgPSBhc3luYyAoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4ge1xyXG4gIGxldCBub3RlcyA9IFtdO1xyXG4gIHRyeSB7XHJcblx0Y29uc3QgYm9keSA9IHtcclxuXHRcdCdlbWFpbCc6IGVtYWlsLFxyXG5cdFx0J3Bhc3N3b3JkJzogcGFzc3dvcmQsXHJcblx0fVxyXG5cdGNvbnN0IGNvbmZpZyA9IHtcclxuXHRcdG1ldGhvZDogJ3Bvc3QnLFxyXG5cdFx0dXJsOiAnaHR0cHM6Ly91cy1jZW50cmFsMS1mbGVldGluZ25vdGVzLTIyZjc3LmNsb3VkZnVuY3Rpb25zLm5ldC9nZXRfYWxsX25vdGVzJyxcclxuXHRcdGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXHJcblx0XHRib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSxcclxuXHR9O1xyXG5cdGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QoY29uZmlnKTtcclxuXHRub3RlcyA9IEpTT04ucGFyc2UocmVzKTtcclxuICB9IGNhdGNoIChlKSB7XHJcblx0ICBjb25zb2xlLmxvZyhlKTtcclxuXHQgIHRocm93ICdGYWlsZWQgdG8gcmV0cmlldmUgbm90ZXMgZnJvbSB0aGUgZGF0YWJhc2UgLSBDaGVjayBjcmVkZW50aWFscyBpbiBzZXR0aW5ncyAmIGludGVybmV0IGNvbm5lY3Rpb24nO1xyXG4gIH1cclxuICByZXR1cm4gbm90ZXM7XHJcbn1cclxuaW50ZXJmYWNlIE5vdGUge1xyXG5cdF9pZDogc3RyaW5nLFxyXG5cdHRpdGxlOiBzdHJpbmcsXHJcblx0Y29udGVudDogc3RyaW5nLFxyXG5cdHRpbWVzdGFtcDogc3RyaW5nLFxyXG5cdHNvdXJjZTogc3RyaW5nLFxyXG5cdF9pc0RlbGV0ZWQ6IGJvb2xlYW4sXHJcbn1cclxuXHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQStFO0FBVy9FLElBQU0sbUJBQTBDO0FBQUEsRUFDL0MsdUJBQXVCO0FBQUEsRUFDdkIsaUJBQWlCO0FBQUEsRUFDakIsVUFBVTtBQUFBLEVBQ1YsVUFBVTtBQUFBO0FBR1gsd0NBQWlELHVCQUFPO0FBQUEsRUFHakQsU0FBUztBQUFBO0FBQ2QsWUFBTSxLQUFLO0FBRVgsV0FBSyxXQUFXO0FBQUEsUUFDZixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixVQUFVLE1BQVk7QUFDckIsZUFBSztBQUFBO0FBQUE7QUFLUCxXQUFLLGNBQWMsSUFBSSx3QkFBd0IsS0FBSyxLQUFLO0FBR3pELFVBQUksS0FBSyxTQUFTLGlCQUFpQjtBQUNsQyxhQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJUCxXQUFXO0FBQUE7QUFBQSxFQUlMLGVBQWU7QUFBQTtBQUNwQixXQUFLLFdBQVcsT0FBTyxPQUFPLElBQUksa0JBQWtCLE1BQU0sS0FBSztBQUFBO0FBQUE7QUFBQSxFQUcxRCxlQUFlO0FBQUE7QUFDcEIsWUFBTSxLQUFLLFNBQVMsS0FBSztBQUFBO0FBQUE7QUFBQSxFQUdwQixvQkFBcUI7QUFBQTtBQUMxQixVQUFJO0FBQ0gsWUFBSSxRQUFRLE1BQU0sb0JBQW9CLEtBQUssU0FBUyxVQUFVLEtBQUssU0FBUztBQUM1RSxnQkFBUSxNQUFNLE9BQU8sQ0FBQyxTQUFlLENBQUMsS0FBSztBQUMzQyxjQUFNLEtBQUssV0FBVyxPQUFPLEtBQUssU0FBUztBQUMzQyxZQUFJLHVCQUFPO0FBQUEsZUFDSCxHQUFQO0FBQ0QsWUFBSSxPQUFPLE1BQU0sVUFBVTtBQUMxQixjQUFJLHVCQUFPO0FBQUEsZUFDTDtBQUNOLGNBQUksdUJBQU87QUFDWCxrQkFBUSxNQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtYLHlCQUEwQixLQUFhO0FBQUE7QUFDNUMsVUFBSSxVQUE4QixJQUFJO0FBQ3RDLFVBQUk7QUFDSCxZQUFJLFFBQVEsS0FBSyxJQUFJLE1BQU07QUFDM0IsaUJBQVMsSUFBSSxHQUFHLElBQUksTUFBTSxRQUFRLEtBQUs7QUFDdEMsY0FBSSxPQUFPLE1BQU07QUFDakIsY0FBSTtBQUNKLGNBQUksV0FBVyxNQUFNLEtBQUssSUFBSSxjQUFjLGFBQWE7QUFDekQsY0FBSSxZQUFZLFNBQVMsYUFBWTtBQUNwQyxzQkFBVSxTQUFTLFlBQVksTUFBTTtBQUFBLGlCQUMvQjtBQUNOLHNCQUFVO0FBQUE7QUFFWCxjQUFJLFlBQWEsUUFBUSxNQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsT0FBTyxLQUFLLEtBQUssV0FBVztBQUNoRixjQUFJLENBQUMsYUFBYSxXQUFXLE1BQU07QUFDbEM7QUFBQTtBQUVELGtCQUFRLElBQUksU0FBUztBQUFBO0FBQUEsZUFFZCxHQUFQO0FBQ0QsZ0JBQVEsTUFBTTtBQUNkLGdCQUFRLE1BQU07QUFBQTtBQUVmLGFBQU87QUFBQTtBQUFBO0FBQUEsRUFJUixvQkFBb0IsTUFBYztBQUNqQyxXQUFRLEtBQUssT0FBTyxNQUFPLEtBQUssUUFBUSxLQUFLLE1BQU07QUFDbkQsV0FBTyxRQUFRO0FBQ2YsV0FBTztBQUFBO0FBQUEsRUFJRixXQUFZLE9BQW9CLFFBQWdCO0FBQUE7QUFDckQsZUFBUyxLQUFLLG9CQUFvQjtBQUNsQyxVQUFJO0FBQ0gsWUFBSSxnQkFBZ0IsTUFBTSxLQUFLLHlCQUF5QjtBQUN4RCxZQUFJLFlBQVksS0FBSyxJQUFJLE1BQU0sc0JBQXNCO0FBQ3JELFlBQUksYUFBYSxNQUFNO0FBQ3RCLGdCQUFNLEtBQUssSUFBSSxNQUFNLGFBQWE7QUFBQTtBQUVuQyxpQkFBUyxJQUFJLEdBQUcsSUFBSSxNQUFNLFFBQVEsS0FBSztBQUN0QyxjQUFJLE9BQU8sTUFBTTtBQUNqQixjQUFJLFFBQVEsS0FBSyxVQUFVLFFBQVEsS0FBSyxLQUFLLFFBQVEsS0FBSyxPQUFPO0FBQ2pFLGNBQUksUUFBUyxLQUFLLFFBQVMsR0FBRyxLQUFLLGFBQWEsR0FBRztBQUNuRCxjQUFJLGNBQ1I7QUFBQSxNQUNNLEtBQUs7QUFBQSxTQUNGLE1BQU0sUUFBUSxPQUFPO0FBQUEsUUFDdEIsS0FBSyxVQUFVLFVBQVUsR0FBRztBQUFBO0FBQUE7QUFFaEMsY0FBSSxPQUFPLEtBQUssb0JBQW9CLFNBQVMsQ0FBQyxRQUFRO0FBQ3RELGNBQUksWUFBWSxjQUFjLEtBQUssVUFBVSxnQkFBZ0IsS0FBSztBQUNsRSxjQUFJLE9BQU8sY0FBYyxJQUFJLEtBQUssUUFBUTtBQUMxQyxjQUFJLFFBQVEsTUFBTTtBQUVqQixrQkFBTSxLQUFLLElBQUksTUFBTSxPQUFPLE1BQU07QUFBQSxpQkFDNUI7QUFFTixnQkFBSSxVQUFVLEtBQUssSUFBSSxNQUFNLHNCQUFzQjtBQUNuRCxnQkFBSSxXQUFXLE1BQU07QUFDcEIsb0JBQU0sS0FBSyxJQUFJLE1BQU0sT0FBTztBQUFBO0FBRTdCLGtCQUFNLEtBQUssSUFBSSxNQUFNLE9BQU8sTUFBTTtBQUFBO0FBQUE7QUFBQSxlQUk1QixHQUFQO0FBQ0QsZ0JBQVEsSUFBSTtBQUNaLGNBQU07QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUtULDRDQUFzQyxpQ0FBaUI7QUFBQSxFQUd0RCxZQUFZLEtBQVUsUUFBNkI7QUFDbEQsVUFBTSxLQUFLO0FBQ1gsU0FBSyxTQUFTO0FBQUE7QUFBQSxFQUdmLFVBQWdCO0FBQ2YsVUFBTSxFQUFDLGdCQUFlO0FBRXRCLGdCQUFZO0FBRVosZ0JBQVksU0FBUyxNQUFNLEVBQUMsTUFBTTtBQUVsQyxRQUFJLHdCQUFRLGFBQ1YsUUFBUSxrQ0FDUixRQUFRLG9EQUNSLFFBQVEsVUFBUSxLQUNmLGVBQWUsNkJBQ2YsU0FBUyxLQUFLLE9BQU8sU0FBUyx1QkFDOUIsU0FBUyxDQUFPLFVBQVU7QUFDMUIsV0FBSyxPQUFPLFNBQVMsd0JBQXdCO0FBQzdDLFlBQU0sS0FBSyxPQUFPO0FBQUE7QUFHckIsUUFBSSx3QkFBUSxhQUNWLFFBQVEsb0JBQ1IsUUFBUSxVQUFRLEtBQ2YsZUFBZSx3QkFDZixTQUFTLEtBQUssT0FBTyxTQUFTLFVBQzlCLFNBQVMsQ0FBTyxVQUFVO0FBQzFCLFdBQUssT0FBTyxTQUFTLFdBQVc7QUFDaEMsWUFBTSxLQUFLLE9BQU87QUFBQTtBQUdyQixRQUFJLHdCQUFRLGFBQ1YsUUFBUSxZQUNSLFFBQVEsVUFBUSxLQUNmLGVBQWUsa0JBQ2YsU0FBUyxLQUFLLE9BQU8sU0FBUyxVQUM5QixTQUFTLENBQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxXQUFXO0FBQ2hDLFlBQU0sS0FBSyxPQUFPO0FBQUE7QUFHckIsUUFBSSx3QkFBUSxhQUNWLFFBQVEseUJBQ1IsVUFBVSxTQUFPLElBQ2hCLFNBQVMsS0FBSyxPQUFPLFNBQVMsaUJBQzlCLFNBQVMsQ0FBTyxRQUFRO0FBQ3hCLFdBQUssT0FBTyxTQUFTLGtCQUFrQjtBQUN2QyxZQUFNLEtBQUssT0FBTztBQUFBO0FBQUE7QUFBQTtBQU92QixrQkFBa0IsT0FBc0IsTUFBYyxLQUFJO0FBQ3hELE1BQUksWUFBWSxPQUFPO0FBQ3ZCLE1BQUksVUFBWSxJQUFJLE9BQU8sWUFBVSxRQUFRO0FBQzdDLFNBQU8sTUFBTSxLQUFLLFdBQVcsUUFBUSxTQUFTO0FBQUE7QUEyQmhELElBQU0sc0JBQXNCLENBQU8sT0FBZSxhQUFxQjtBQUNyRSxNQUFJLFFBQVE7QUFDWixNQUFJO0FBQ0wsVUFBTSxPQUFPO0FBQUEsTUFDWixTQUFTO0FBQUEsTUFDVCxZQUFZO0FBQUE7QUFFYixVQUFNLFNBQVM7QUFBQSxNQUNkLFFBQVE7QUFBQSxNQUNSLEtBQUs7QUFBQSxNQUNMLGFBQWE7QUFBQSxNQUNiLE1BQU0sS0FBSyxVQUFVO0FBQUE7QUFFdEIsVUFBTSxNQUFNLE1BQU0sNkJBQVE7QUFDMUIsWUFBUSxLQUFLLE1BQU07QUFBQSxXQUNULEdBQVA7QUFDRCxZQUFRLElBQUk7QUFDWixVQUFNO0FBQUE7QUFFUCxTQUFPO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
